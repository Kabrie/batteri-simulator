{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf460
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw2834\paperh2834\margl1440\margr1440\vieww18720\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 BCMS
\b0 \
\
Batteri Contest \'e8 un ambiente online di simulazione di colonie di batteri sviluppati dalla community che implementano diverse strategie per riuscire a prendere il controllo dell'intero terreno di gara.\
\
Il sistema \'e8 composto da due parti distinte, ovvero l\'92interfaccia web, scritta in PHP e il sistema di simulazione, scritto in Java.\
\
Il primo gestisce in modo autonomo la registrazione degli utenti, l\'92upload delle 
\i Classi
\i0  sviluppate per controllare il proprio batterio e la compilazione del codice caricato. Gestisce inoltre la schedulazione delle partite e la gestione del ranking degli utenti.\
Al termine di ogni battaglia i risultati vengono inviati al sistema web che si occupa anche della comunicazione con il database.\
La comunicazione tra i due sistemi avviene tramite chiamate HTTP a pagine opportunamente protette accettando l\'92accesso solo da IP interni alla sottorete dei worker (simulatori). \
\
Per motivi di ottimizzazione, si \'e8 deciso di utilizzare due diversi server HTTP, Nginx e Apache2. Il primo, in ascolto sulla porta 80 accetta le connessioni e agisce da load balancer. In caso vengano richiesti contenuti statici, come i font o gli stylesheet, essi verranno inviati da Nginx stesso, in caso contrario la richiesta viene inoltrata ad Apache per completare l\'92elaborazione dei contenuti dinamici. Per rendere il sistema web \'93scalabile\'94 \'e8 inoltre possibile configurare pi\'f9 server Apache per distribuire il carico, utilizzando un unico database centralizzato.\
\
Il sistema di simulazione si occupa di creare una battaglia comprendendo fino a 6 famiglie di batteri diversi. Accetta come parametri i nomi dei batteri da caricare, l\'92URL verso cui inviare lo stream video della simulazione e l\'92URL a cui inviare il risultato finale. La gestione della schedulazione \'e8 implementata con un piccolo script in Bash, eseguito ogni minuto, che controlla sia presente una partita da lanciare, ed in caso affermativo lancia la simulazione.\
\
Per motivi tecnici non \'e8 possibile inviare direttamente lo stream video a un sistema esterno per la diffusione video (in questo caso Twitch.tv), ma \'e8 necessario aggiugnere prima una traccia audio (silenziosa) utilizzando ffmpeg. Lo stream proveniente dal simulatore viene quindi inviato ad un server RTMP locale (Nginx compilato con gli opportuni moduli aggiuntivi), viene letto da ffmpeg che aggiunge una traccia audio AAC stereo campionata a 48 kHz e invia infine lo stream all\'92endpoint di Twitch pi\'f9 vicino per diminuire la latenza.}